version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  aws:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/
commands:
  install-tar-gzip:
    steps:
      - run:
          name: Install Tar and Gzip
          command: |
            yum install -y tar gzip
  cat-file:
    description: Cat the file contents to console. Useful for debugging
    parameters:
      file_path:
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cat file content
          command: |
            cat << parameters.file_path >>
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: "{ CIRCLE_WORKFLOW_ID:0:7 }"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<< parameters.workflow-id >>
            aws cloudformation delete-stack \
             --stack-name udapeople-backend-<< parameters.workflow-id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      migration_id:
        type: string
        default: "migration_${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS = $(curl "https://kvdb.io/MN5GdbcgXgoRVQJ1wMYokF/<< parameters.migration_id >>")
            if [[ $SUCCESS -eq 1 ]] 
            then
               cd ~/project/backend
               npm install
               npm run migrations:revert
               exit 1
            fi
jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm install
            npm upgrade
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
      - slack/notify:
          #channel: ABCXYZ
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - install-tar-gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            echo "[web:vars]" >> .circleci/ansible/inventory.txt
            echo "ansible_user=ubuntu" >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      - cat-file:
          file_path: .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "2a:cd:12:a2:74:23:81:3c:98:cf:da:84:fd:9b:41:06"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible
          command: |
            sudo apt-get update
            sudo apt-get install software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install ansible
      - cat-file:
          file_path: .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
  run-migrations:
    executor: node
    working_directory: ~/project
    steps:
      - run: sudo apt-get update && sudo apt-get install -y git sudo tar curl && sudo apt -u upgrade
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
      - run:
          name: Send migration results to kvdb
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt; then
                curl https://kvdb.io/MN5GdbcgXgoRVQJ1wMYokF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
                exit 0
            else
                curl https://kvdb.io/MN5GdbcgXgoRVQJ1wMYokF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                exit 1
            fi
      - revert-migrations:
          migration_id: "migration_${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    executor: aws
    working_directory: ~/project
    steps:
      - checkout
      - install-tar-gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Install npm nodejs
          command: |
            sudo apt-get update
            sudo apt install nodejs
            sudo apt install npm
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update
            sudo apt-get install software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install ansible
      - run:
          name: Get backend url
          command: |
            touch backend.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> backend.txt
            echo "Backend IP is: $(cat backend.txt)"
            export BACKEND_IP=$(cat backend.txt) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/project
    steps:
      - checkout
      - install-tar-gzip
      - add_ssh_keys:
          fingerprints:
            - "2a:cd:12:a2:74:23:81:3c:98:cf:da:84:fd:9b:41:06"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible
          command: |
            sudo apt-get update
            sudo apt-get install software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install ansible
      - cat-file:
          file_path: .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
          context:
            - Slack
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
