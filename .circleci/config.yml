version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  aws:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/
commands:
  install-tar-gzip:
    steps:
      - run:
          name: Install Tar and Gzip
          command: |
            yum install -y tar gzip
  cat-file:
    description: Cat the file contents to console. Useful for debugging
    parameters:
      file_path:
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cat file content
          command: |
            cat << parameters.file_path >>
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: "{CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          # when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<< parameters.workflow-id >>
            aws cloudformation delete-stack \
             --stack-name udapeople-backend-<< parameters.workflow-id >>
jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
      - slack/notify:
          #channel: ABCXYZ
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - install-tar-gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text > project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - cat-file:
          file_path: project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #           exit 1
  #     # Here's where you will add some code to rollback on failure

  # run-migrations:
  #   executor: node
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #     # Here's where you will add some code to rollback on failure

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure

  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #       # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - deploy-infrastructure
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-backend:
      #     requires:
      #       - build-backend
      #     context:
      #       - Slack
      # - scan-frontend:
      #     requires:
      #       - build-frontend
